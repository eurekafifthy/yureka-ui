const path = require("path");
const fs = require("fs-extra");
const ora = require("ora");
const chalk = require("chalk");
const inquirer = require("inquirer");
const detectTailwind = require("../utils/detect-tailwind");
const installDependencies = require("../utils/install-dependencies");
const detectTypeScript = require("../utils/detect-typescript");

/**
 * Initialize Yureka UI in a Next.js project
 */
async function initCommand() {
  console.log(
    chalk.blue("ðŸš€ Initializing Yureka UI in your Next.js project...")
  );

  // Validate project environment
  if (!(await validateProjectEnvironment())) {
    return;
  }

  // Detect project configuration
  const hasTailwind = await detectTailwind();
  const isTypeScript = await detectTypeScript();

  // Confirm setup with detected configuration
  const { confirm } = await inquirer.prompt([
    {
      type: "confirm",
      name: "confirm",
      message: `We detected that your project ${
        hasTailwind ? "uses" : "does not use"
      } Tailwind CSS and ${
        isTypeScript ? "uses" : "does not use"
      } TypeScript. Continue with setup?`,
      default: true,
    },
  ]);

  if (!confirm) {
    console.log(chalk.yellow("Setup cancelled."));
    return;
  }

  const spinner = ora("Creating directory structure...").start();

  try {
    // Set up directory structure
    const componentsDir = path.join(process.cwd(), "components");
    const yurekaDir = path.join(componentsDir, "yureka-ui");

    await fs.ensureDir(yurekaDir);

    // Create index file with appropriate extension
    const indexFile = `index${isTypeScript ? ".tsx" : ".js"}`;
    await fs.writeFile(
      path.join(yurekaDir, indexFile),
      `// Yureka UI Components\n// This file is automatically generated for all UI components\n`
    );

    // Create config file to store user preferences
    await fs.writeFile(
      path.join(yurekaDir, "yureka.config.json"),
      JSON.stringify(
        {
          useTailwind: hasTailwind,
          useTypeScript: isTypeScript,
          version: require(path.join(__dirname, "../../package.json")).version,
        },
        null,
        2
      )
    );

    spinner.succeed("Directory structure created successfully");

    // Offer to install Tailwind if not detected
    if (!hasTailwind) {
      const { installTailwind } = await inquirer.prompt([
        {
          type: "confirm",
          name: "installTailwind",
          message: "Would you like to install Tailwind CSS for this project?",
          default: false,
        },
      ]);

      if (installTailwind) {
        await installDependencies(
          ["tailwindcss", "postcss", "autoprefixer"],
          true
        );
        console.log(
          chalk.green(
            "âœ… Tailwind CSS installed. Please follow the Tailwind CSS setup guide to complete the configuration."
          )
        );
      } else {
        console.log(
          chalk.blue(
            "Using Yureka UI without Tailwind CSS. Components will use CSS modules."
          )
        );
      }
    }

    console.log(
      chalk.green("\nâœ… Yureka UI has been initialized successfully!")
    );
    console.log(chalk.blue("\nYou can now add components with:"));
    console.log(chalk.white("  npx yureka@latest add button"));
    console.log(chalk.white("  npx yureka@latest add [component-name]"));
    console.log(chalk.blue("\nComponents will be installed at:"));
    console.log(chalk.white(`  ${yurekaDir}`));
  } catch (error) {
    spinner.fail("Failed to initialize Yureka UI");
    console.error(chalk.red(`Error: ${error.message}`));
    process.exit(1);
  }
}

/**
 * Validate that the current project is a Next.js project with necessary files
 */
async function validateProjectEnvironment() {
  // Check if package.json exists
  if (!fs.existsSync("package.json")) {
    console.error(
      chalk.red(
        "Error: No package.json found. Please run this command in your Next.js project root."
      )
    );
    process.exit(1);
    return false;
  }

  // Check if it's a Next.js project
  const packageJson = require(path.join(process.cwd(), "package.json"));
  if (!packageJson.dependencies?.next && !packageJson.devDependencies?.next) {
    console.error(
      chalk.red(
        "Error: This doesn't appear to be a Next.js project. Yureka UI is designed to work with Next.js."
      )
    );
    process.exit(1);
    return false;
  }

  return true;
}

module.exports = initCommand;
